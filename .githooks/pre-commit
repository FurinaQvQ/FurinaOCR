#!/bin/bash
# FurinaOCR Git Pre-commit Hook
# 确保提交前代码质量符合标准

set -e

# 颜色输出函数
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

success() { echo -e "${GREEN}✅ $1${NC}"; }
warning() { echo -e "${YELLOW}⚠️ $1${NC}"; }
error() { echo -e "${RED}❌ $1${NC}"; }
info() { echo -e "${BLUE}ℹ️ $1${NC}"; }
header() { echo -e "\n${BLUE}🎯 $1${NC}"; }

# 检查是否在Git仓库中
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    error "不在Git仓库中"
    exit 1
fi

header "FurinaOCR 预提交质量检查"

# 检查是否有待提交的Rust文件
rust_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(rs|toml)$' || true)

if [ -z "$rust_files" ]; then
    info "没有Rust文件变更，跳过检查"
    exit 0
fi

info "检测到以下Rust文件变更:"
echo "$rust_files" | sed 's/^/  - /'

# 检查Rust工具链
header "检查Rust工具链"
if ! command -v cargo &> /dev/null; then
    error "Cargo未安装或不在PATH中"
    exit 1
fi

if ! command -v rustfmt &> /dev/null; then
    error "rustfmt未安装，运行: rustup component add rustfmt"
    exit 1
fi

if ! command -v cargo-clippy &> /dev/null; then
    error "clippy未安装，运行: rustup component add clippy"
    exit 1
fi

success "Rust工具链检查通过"

# 代码格式检查
header "代码格式检查"
if ! cargo fmt --all -- --check > /dev/null 2>&1; then
    error "代码格式不符合标准"
    info "运行以下命令修复格式问题:"
    echo "  cargo fmt --all"
    exit 1
fi
success "代码格式检查通过"

# Clippy静态分析（仅检查变更文件相关的警告）
header "Clippy静态分析"
if ! cargo clippy --all-targets -- -D warnings > /dev/null 2>&1; then
    error "Clippy检查发现问题"
    info "运行以下命令查看详细信息:"
    echo "  cargo clippy --all-targets -- -D warnings"
    exit 1
fi
success "Clippy检查通过，零警告"

# 快速编译检查
header "编译检查"
if ! cargo check --all-targets > /dev/null 2>&1; then
    error "编译检查失败"
    info "运行以下命令查看详细错误:"
    echo "  cargo check --all-targets"
    exit 1
fi
success "编译检查通过"

# 运行测试（仅核心测试）
header "核心测试"
if ! cargo test --lib > /dev/null 2>&1; then
    error "核心测试失败"
    info "运行以下命令查看详细信息:"
    echo "  cargo test --lib"
    exit 1
fi
success "核心测试通过"

# 检查TODO和FIXME注释
header "检查待办事项"
todo_count=$(git diff --cached | grep -E '^\+.*TODO|^\+.*FIXME' | wc -l || true)
if [ "$todo_count" -gt 0 ]; then
    warning "检测到 $todo_count 个新的TODO/FIXME注释"
    info "请确保这些是有意添加的:"
    git diff --cached | grep -E '^\+.*TODO|^\+.*FIXME' | sed 's/^+/  /'
fi

# 检查敏感信息
header "敏感信息检查"
sensitive_patterns=("password" "secret" "key" "token" "api_key")
found_sensitive=false

for pattern in "${sensitive_patterns[@]}"; do
    if git diff --cached | grep -qi "$pattern"; then
        warning "可能包含敏感信息: $pattern"
        found_sensitive=true
    fi
done

if [ "$found_sensitive" = true ]; then
    error "检测到可能的敏感信息，请检查后再提交"
    exit 1
fi

# 检查提交消息长度（如果已指定）
if [ -n "$1" ]; then
    commit_msg_file="$1"
    if [ -f "$commit_msg_file" ]; then
        commit_msg=$(head -n 1 "$commit_msg_file")
        if [ ${#commit_msg} -gt 72 ]; then
            warning "提交消息标题过长 (${#commit_msg} 字符，建议 ≤ 72)"
        fi
        
        if ! echo "$commit_msg" | grep -qE '^(feat|fix|docs|style|refactor|test|chore|perf|ci)(\(.+\))?: .+'; then
            warning "提交消息不符合约定式提交格式"
            info "推荐格式: type(scope): description"
            info "例如: feat(core): 添加新的OCR识别算法"
        fi
    fi
fi

# 最终检查结果
header "预提交检查完成"
success "🎉 所有检查通过！可以安全提交。"

# 提示性能提醒
info "提示: 提交后将触发完整的CI/CD流水线"
info "建议在推送前运行: ./scripts/quality-check.ps1 -Full"

exit 0 