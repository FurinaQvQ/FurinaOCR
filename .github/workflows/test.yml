name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # 专注于Windows平台测试
        os: [windows-latest]
        rust: [nightly]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all --check

    - name: Run clippy (zero warnings policy)
      run: cargo clippy --all-targets -- -D warnings

    - name: Run unit tests
      run: cargo test --verbose --all

    - name: Run integration tests
      run: cargo test -p integration_tests --verbose

    - name: Run doc tests
      run: cargo test --doc --verbose

    - name: Run performance tests
      run: cargo test test_performance_critical_paths --verbose

  windows-specific:
    name: Windows Specific Tests
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: windows-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run Windows capture tests
      run: cargo test -p furina_core capture --verbose

    - name: Run scanning tests
      run: cargo test -p genshin scanner --verbose

  coverage:
    name: Code Coverage
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: false

  test-summary:
    name: Test Summary
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly

    - name: Generate test report
      run: |
        echo "## FurinaOCR 测试报告" > test-report.md
        echo "" >> test-report.md
        echo "### 测试统计" >> test-report.md
        echo "- 总测试数: 99" >> test-report.md
        echo "- furina_core: 68 个单元测试" >> test-report.md
        echo "- genshin: 20 个单元测试" >> test-report.md
        echo "- integration_tests: 9 个集成测试" >> test-report.md
        echo "- 文档测试: 2 个" >> test-report.md
        echo "" >> test-report.md
        
        # 运行测试并收集结果
        cargo test --all 2>&1 | Tee-Object test-output.txt
        
        # 检查测试是否全部通过
        if (Select-String -Path test-output.txt -Pattern "test result: ok") {
          echo "✅ 所有测试通过" >> test-report.md
        } else {
          echo "❌ 测试失败" >> test-report.md
        }
        
        echo "" >> test-report.md
        echo "### 代码质量检查" >> test-report.md
        
        # Clippy检查
        if (cargo clippy --all-targets -- -D warnings) {
          echo "✅ Clippy检查通过（零警告）" >> test-report.md
        } else {
          echo "❌ Clippy检查失败" >> test-report.md
        }
        
        # 格式检查
        if (cargo fmt --all --check) {
          echo "✅ 代码格式正确" >> test-report.md
        } else {
          echo "❌ 代码格式需要调整" >> test-report.md
        }

    - name: Upload test report
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: test-report.md 